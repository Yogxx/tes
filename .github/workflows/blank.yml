name: Action

on:
  workflow_dispatch:
    inputs:
      openwrt_version:
        type: choice
        required: true
        description: 'OpenWrt Version :'
        default: '23.05.5'
        options:
          - '22.03.5'
          - '23.05.4'
          - '23.05.5'
          - '24.10.0-rc4'
      target_subtarget:
        type: choice
        required: true
        description: 'Target/Subtarget :'
        default: 'armsr/armv8'
        options:
          - 'ramips/mt7620'
          - 'armvirt/64'
          - 'armsr/armv8'
      target_profile:
        type: choice
        required: true
        description: 'Target Profile :'
        default: 'generic'
        options: 
          - 'zbtlink_zbt-wr8305rt'
          - 'Default'
          - 'generic'
      packages_list:
        type: choice
        required: true
        description: "Packages list file :"
        default: 'none'
        options:
          - 'Packages_STB_NoDocker.txt'
          - 'Packages_STB_Docker.txt'
          - 'Packages_BOLT.txt'
          - 'none'
      custom_files_path:
        type: choice
        required: true
        description: "Custom files path :"
        default: 'none'
        options:
          - 'Custom_Files_BOLT'
          - 'Custom_Files_STB'
          - 'none'
      custom_pkgs_path:
        type: choice
        required: true
        description: "Custom packages path :"
        default: 'none'
        options:
          - 'Custom_Pkgs_BOLT'
          - 'Custom_Pkgs_STB'
          - 'none'

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions: write-all
    
    steps:
      - uses: actions/checkout@v3

      - name: Update Machine
        shell: bash
        run: |
          sudo apt update>/dev/null 2>&1 &&
          sudo apt install dos2unix build-essential libncurses-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python3 -y>/dev/null 2>&1 &&
          sudo timedatectl set-timezone "Asia/Jakarta">/dev/null 2>&1 &&
          build_time=$(date +'%d-%B-%Y_%H.%M') &&
          echo "build_time=${build_time}">>$GITHUB_ENV &&
          echo -e "Current Time\t: ${build_time}"

      - name: Prepare Image Builder
        shell: bash
        working-directory: ./
        run: |
          [[ -d "${PWD}/tmp" ]] || mkdir "${PWD}/tmp"
          [[ -d "${PWD}/sdk" ]] || mkdir "${PWD}/sdk"
          [[ -d "${PWD}/out" ]] || mkdir "${PWD}/out"
          builder_url="https://downloads.openwrt.org/releases/${{inputs.openwrt_version}}/targets/${{inputs.target_subtarget}}" &&
          builder_name="openwrt-imagebuilder-${{inputs.openwrt_version}}-$(sed 's|/|-|g'<<<${{inputs.target_subtarget}}).Linux-x86_64.tar.zst" &&
          echo "Downloading image builder from ${builder_url}/${builder_name}" &&
          if wget -qO "${PWD}/tmp/${builder_name}" "${builder_url}/${builder_name}">/dev/null 2>&1;then
            echo "Extracting imagebuilder from ${PWD}/tmp/${builder_name} to ${PWD}/sdk" &&
            if tar --strip-components=1 -C "${PWD}/sdk" -xJf "${PWD}/tmp/${builder_name}">/dev/null 2>&1;then
              echo "OK, Content of ${PWD}/sdk: " &&
              ls -h "${PWD}/sdk"
            else
              echo "Failed" &&
              exit 1
            fi
          else
            echo "Failed" &&
            exit 1
          fi

      - name: Tweaks .config File
        shell: bash
        working-directory: ./sdk
        if: ${{inputs.target_subtarget == 'armsr/armv7' || inputs.target_subtarget == 'armsr/armv8'}}
        run: |
          if [[ -f "${PWD}/.config" ]];then
            for x in CONFIG_TARGET_ROOTFS_CPIOGZ CONFIG_TARGET_ROOTFS_SQUASHFS CONFIG_TARGET_IMAGES_GZIP CONFIG_JSON_OVERVIEW_IMAGE_INFO;do
              if sed -i "s|^${x}.*$|# ${x} is not set|g" "${PWD}/.config";then
                echo "Replaced line ${x}"
              else
                echo "Failed while replacing line ${x}" &&
                exit
              fi
            done &&
            target_root_size="512" &&
            if sed -i "s|^CONFIG_TARGET_ROOTFS_PARTSIZE=.*|CONFIG_TARGET_ROOTFS_PARTSIZE=${target_root_size}|g" "${PWD}/.config";then
              echo "Target rootfs size set to ${target_root_size}"
            else
              echo "Failed setting target rootfs size" &&
              exit 1
            fi
          else
            echo "${PWD}/.config not found"
            exit 1
          fi

      - name: Populate Packages List
        shell: bash
        working-directory: ./
        if: ${{inputs.packages_list != 'none' && inputs.packages_list != ''}}
        run: |
          if [[ -f "${PWD}/${{inputs.packages_list}}" ]];then
            dos2unix -q -n "${PWD}/${{inputs.packages_list}}" "${PWD}/pkg.txt" &&
            sed -i '/^#.*$/d' "${PWD}/pkg.txt" &&
            sed -i 's|#.*$||g' "${PWD}/pkg.txt" &&
            sed -i 's|[[:blank:]].*$||g' "${PWD}/pkg.txt" &&
            sed -i '/^$/d' "${PWD}/pkg.txt" &&
            sed 's|!||g' "${PWD}/pkg.txt">"${PWD}/packages_command.txt" &&
            packages_command=$(paste -s -d ' ' "${PWD}/packages_command.txt") &&
            if [[ "$(awk '{print $1}' <<<`wc -l ${PWD}/packages_command.txt`)" -gt 0 ]];then
              echo "packages_command=${packages_command}">>$GITHUB_ENV &&
              echo "PACKAGES=\"${packages_command}\""
            fi &&
            if grep '^!' "${PWD}/pkg.txt">"${PWD}/disables_command.txt";then
              sed -i 's|!||g' "${PWD}/disables_command.txt" &&
              sed -i '/^$/d' "${PWD}/disables_command.txt" &&
              sed -i 's|[[:blank:]].*$||g' "${PWD}/disables_command.txt" &&
              disables_command=$(paste -s -d ' ' "${PWD}/disables_command.txt") &&
              if [[ "$(awk '{print $1}' <<<`wc -l ${PWD}/disables_command.txt`)" -gt 0 ]];then
                echo "disables_command=${disables_command}">>$GITHUB_ENV &&
                echo "DISABLED_SERVICES=\"${disables_command}\""
              fi
            fi
          else
            echo "${PWD}/${{inputs.packages_list}} not found" &&
            ls -h "${PWD}" &&
            exit 1
          fi
      
      - name: Checking Custom Files
        shell: bash
        working-directory: ./
        if: ${{inputs.custom_files_path != 'none' && inputs.custom_files_path != ''}}
        run: |
          if [[ -d "${PWD}/${{inputs.custom_files_path}}" ]];then
            if [[ "$(ls -h "${PWD}/${{inputs.custom_files_path}}"|grep -v "README.md"|wc -l)" -gt 0 ]];then
              custom_files_path="${PWD}/${{inputs.custom_files_path}}" &&
              echo "custom_files_exist=1">>$GITHUB_ENV &&
              echo "custom_files_path=${custom_files_path}">>$GITHUB_ENV &&
              echo "Custom files is exist in ${custom_files_path} :" &&
              ls -h "${custom_files_path}"
            else
              echo "custom_files_exist=0">>$GITHUB_ENV &&
              echo "No files found in ${PWD}/${{inputs.custom_files_path}}" &&
              echo "Skipped"
            fi
          else
            echo "${PWD}/${{inputs.custom_files_path}} not found" &&
            exit 1
          fi
      
      - name: Checking Custom Packages
        shell: bash
        working-directory: ./
        if: ${{inputs.custom_pkgs_path != 'none' && inputs.custom_pkgs_path != ''}}
        run: |
          if [[ -d "${PWD}/${{inputs.custom_pkgs_path}}" ]];then
            if [[ "$(ls -h "${PWD}/${{inputs.custom_pkgs_path}}"|grep -v "README.md"|wc -l)" -gt 0 ]];then
              if [[ ! -d "${PWD}/sdk/packages" ]];then
                mkdir "${PWD}/sdk/packages" &&
                echo "${PWD}/sdk/packages created"
              fi &&
              for package_file in $(find "${PWD}/${{inputs.custom_pkgs_path}}" -type f -name *.ipk);do
                if cp "${package_file}" "${PWD}/sdk/packages/";then
                  echo "Copied ${package_file}"
                else
                  echo "Failed when copying ${package_file}" &&
                  exit 1
                fi
              done
            else
              echo "${PWD}/${{inputs.custom_pkgs_path}} is empty"
            fi
          else
            echo "${PWD}/${{inputs.custom_pkgs_path}} not found" &&
            ls -h "${PWD}" &&
            exit 1
          fi

      - name: Build Image without Custom Files
        shell: bash
        working-directory: ./sdk
        if: ${{env.custom_files_exist == 0 && env.custom_files_exist != 1}}
        run: |
          if make image PROFILE="${{inputs.target_profile}}" \
          PACKAGES="${{env.packages_command}}" \
          DISABLED_SERVICES="${{env.disables_command}}" \
          -j1>../out/build.log 2>&1;then
            echo "OK, Contents of ${PWD}/bin/targets/${{inputs.target_subtarget}}: "
            ls -h "${PWD}/bin/targets/${{inputs.target_subtarget}}"
          else
            echo "FAILED" &&
            if [[ -f ../out/build.log ]];then cat ../out/build.log;fi &&
            exit 1
          fi
      
      - name: Build Image with Custom Files
        shell: bash
        working-directory: ./sdk
        if: ${{env.custom_files_exist == 1 && env.custom_files_exist != 0}}
        run: |
          if make image PROFILE="${{inputs.target_profile}}" \
          PACKAGES="${{env.packages_command}}" \
          DISABLED_SERVICES="${{env.disables_command}}" \
          FILES="${{env.custom_files_path}}" \
          -j1>../out/build.log 2>&1;then
            echo "OK, Contents of ${PWD}/bin/targets/${{inputs.target_subtarget}}: "
            ls -h "${PWD}/bin/targets/${{inputs.target_subtarget}}"
          else
            echo "FAILED" &&
            if [[ -f ../out/build.log ]];then cat ../out/build.log;fi &&
            exit 1
          fi

      - name: Compress Assets
        shell: bash
        working-directory: ./out
        run: |
          tag_name="${{inputs.target_profile}}_${{inputs.openwrt_version}}_${{env.build_time}}" &&
          asset_name="${tag_name}.tar.gz" &&
          asset_path="${{github.workspace}}/${asset_name}" &&
          echo "tag_name=${tag_name}">>$GITHUB_ENV &&
          echo "asset_name=${asset_name}">>$GITHUB_ENV &&
          echo "asset_path=${asset_path}">>$GITHUB_ENV &&
          echo "asset_type=application/gzip">>$GITHUB_ENV &&
          if mv "../sdk/bin/targets/${{inputs.target_subtarget}}"/* .;then
            echo "Build result moved from ../sdk/bin/targets/${{inputs.target_subtarget}}/* to ${PWD}" &&
            if tar -czvf "${asset_path}" *;then
              echo "Output files compressed successfully"
            else
              echo "Compression failed" &&
              exit 1
            fi
          else
            echo "Failed when moving build results" &&
            exit 1
          fi
      
      - name: Create Release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{env.tag_name}}
          release_name: ${{env.tag_name}}
          draft: false
          prerelease: false
          body: |
            Release notes :
            ${{inputs.release_notes}}

      - name: Upload Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.release.outputs.upload_url}}
          asset_path: ${{env.asset_path}}
          asset_name: ${{env.asset_name}}
          asset_content_type: ${{env.asset_type}}
